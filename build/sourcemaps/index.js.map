{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;IAmBe,kBAAkB,qBAAjC,WAAkC,MAAM,EAAE,IAAI,EAAE;AAC9C,SAAO,MAAM,SAAS,CAAC,WAAW,EAAE,aAAa,CAAC,MAAM,CAAC,EAAE,eAAc,EAAC,KAAK,EAAE,SAAS,EAAC,EAAE,IAAI,CAAC,CAAC,CAAC;CACrG;;IAEc,mBAAmB,qBAAlC,WAAmC,MAAM,EAAE,IAAI,EAAE;AAC/C,SAAO,MAAM,UAAU,CAAC,WAAW,EAAE,aAAa,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;CACnE;;IAEc,iBAAiB,qBAAhC,WAAiC,OAAO,EAAE;AACxC,MAAI,WAAW,GAAG,CAAC,MAAM,kBAAkB,CAAC,4DAA4D,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAA,CAAE,IAAI,EAAE,CAAC;AAC5I,SAAQ,WAAW,KAAK,GAAG,CAAE;CAC9B;;IAEc,gBAAgB,qBAA/B,WAAgC,OAAO,EAAE;AACvC,MAAI;AACF,WAAO,CAAC,MAAM,kBAAkB,CAAC,uBAAuB,CAAC,CAAA,CAAE,IAAI,EAAE,CAAC;GACnE,CAAC,OAAO,CAAC,EAAE;AACV,WAAO,IAAI,CAAC;GACb;CACF;;AAtCD,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACtC,IAAI,UAAU,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAClD,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,SAAS,aAAa,CAAC,MAAM,EAAE;AAC7B,MAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AACzB,UAAM,GAAG,CAAC,MAAM,CAAC,CAAC;GACnB;;AAED,MAAI,IAAI,GAAG,EAAE,CAAC;AACd,OAAK,IAAI,IAAI,IAAI,MAAM,EAAE;AACvB,QAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,QAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACjB;;AAED,SAAO,IAAI,CAAC;CAEb;;AAuBD,MAAM,CAAC,OAAO,GAAG;AACf,WAAS,EAAE,kBAAkB;AAC7B,mBAAiB,EAAjB,iBAAiB;AACjB,kBAAgB,EAAhB,gBAAgB;AAChB,YAAU,EAAE,mBAAmB;CAChC,CAAA","file":"index.js","sourcesContent":["let execAsync = require('exec-async');\nlet spawnAsync = require('@exponent/spawn-async');\nlet util = require('util');\n\nfunction osascriptArgs(script) {\n  if (!util.isArray(script)) {\n    script = [script];\n  }\n\n  let args = [];\n  for (let line of script) {\n    args.push('-e');\n    args.push(line);\n  }\n\n  return args;\n\n}\n\nasync function osascriptExecAsync(script, opts) {\n  return await execAsync('osascript', osascriptArgs(script), Object.assign({stdio: 'inherit'}, opts));\n}\n\nasync function osascriptSpawnAsync(script, opts) {\n  return await spawnAsync('osascript', osascriptArgs(script), opts);\n}\n\nasync function isAppRunningAsync(appName) {\n  let zeroMeansNo = (await osascriptExecAsync('tell app \"System Events\" to count processes whose name is ' + JSON.stringify(appName))).trim();\n  return (zeroMeansNo !== '0');\n}\n\nasync function safeIdOfAppAsync(appName) {\n  try {\n    return (await osascriptExecAsync('id of app \"Simulator\"')).trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nmodule.exports = {\n  execAsync: osascriptExecAsync,\n  isAppRunningAsync,\n  safeIdOfAppAsync,\n  spawnAsync: osascriptSpawnAsync,\n}\n"],"sourceRoot":"/source/"}